function Math.init 1
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.max 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.multiply 2
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push argument 1
push local 0
call Math.getBit 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push argument 0
add
pop local 1
label IF_FALSE0
push argument 0
push argument 0
add
pop argument 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.getTwoRaisedTo 0
push argument 0
push constant 15
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
label IF_FALSE0
push argument 0
push static 0
add
pop pointer 1
push that 0
return
function Math.getBit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
neg
return
function Math.divide 2
push constant 1
pop local 1
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 1
neg
call Math.divide 2
neg
return
goto IF_END3
label IF_FALSE3
push argument 0
neg
push argument 1
neg
call Math.divide 2
return
label IF_END3
goto IF_END2
label IF_FALSE2
push argument 0
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
neg
push argument 1
call Math.divide 2
neg
return
label IF_FALSE4
label IF_END2
push argument 0
push argument 1
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
push constant 2
push argument 1
call Math.multiply 2
push constant 0
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
return
label IF_FALSE6
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 2
push local 0
call Math.multiply 2
return
goto IF_END7
label IF_FALSE7
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label IF_END7
function Math.sqrt 4
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push constant 0
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push local 1
push constant 1
sub
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
return
label IF_FALSE2
push local 0
push local 1
push local 0
sub
push constant 2
call Math.divide 2
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 2
return
goto IF_END3
label IF_FALSE3
push local 3
push argument 0
gt
push local 3
or
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
pop local 1
goto IF_END4
label IF_FALSE4
push local 2
pop local 0
label IF_END4
label IF_END3
goto WHILE_EXP0
label WHILE_END0
push local 2
return

class Memory{

	static Array RAM;
	static Array HEAP;
	
	function void init(){
		let RAM = 0;
		let HEAP = 2048;
		let HEAP[0] = -1; // No more free segments
		let HEAP[1] = 16384 - 2048 - 2; // Initial free size
		return;
	}

	function int peek(int address){
		return RAM[address];
	}
	
	function void poke(int address, int value){
		let RAM[address] = value;
		return;
	}
	
	function Array alloc(int size){
		var Array current, selected, block;
		var int currentSize, selectedSize;
		
		if(size < 0){
			do Sys.error(5);
		}
		
		let current = HEAP;
		let selected = -1;
		let selectedSize = HEAP[1] + 1;  // Strictly greater than max
		let currentSize = current[1];
		while(current > -1){
			if(~(currentSize < (size + 2))){
				if(currentSize < selectedSize){
					let selected = current;
					let selectedSize = currentSize;
				}
			}
			let current = current[0];
			let currentSize = current[1];
		}
		if(selected = -1){
			do Sys.error(6);
		}
		
		let selected[1] = selected[1] - size -2;
		let block = selected + selected[1] + 1;
		let block[0] = -1;
		let block[1] = size;
		return block + 2;
	}
	
	function void deAlloc(Array array){
		var Array current, block;
		let block = array - 2;
		let current = HEAP;
		while(current[0] > 0){
			let current = current[0];
		}
		let current[0] = block;
		return;
	}
}